
--
-- PostgreSQL database dump
--

-- Dumped from database version 10.7
-- Dumped by pg_dump version 10.7

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';

--
-- Name: mt_get_next_hi(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.mt_get_next_hi(entity character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
	current_value bigint;
	next_value bigint;
BEGIN
	select hi_value into current_value from public.mt_hilo where entity_name = entity;
	IF current_value is null THEN
		insert into public.mt_hilo (entity_name, hi_value) values (entity, 0);
		next_value := 0;
	ELSE
		next_value := current_value + 1;
		update public.mt_hilo set hi_value = next_value where entity_name = entity;
	END IF;

	return next_value;
END
$$;


ALTER FUNCTION public.mt_get_next_hi(entity character varying) OWNER TO postgres;

--
-- Name: mt_immutable_timestamp(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.mt_immutable_timestamp(value text) RETURNS timestamp without time zone
    LANGUAGE sql IMMUTABLE
    AS $$
    select value::timestamp
$$;


ALTER FUNCTION public.mt_immutable_timestamp(value text) OWNER TO postgres;

--
-- Name: mt_immutable_timestamptz(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.mt_immutable_timestamptz(value text) RETURNS timestamp with time zone
    LANGUAGE sql IMMUTABLE
    AS $$
    select value::timestamptz
$$;


ALTER FUNCTION public.mt_immutable_timestamptz(value text) OWNER TO postgres;

--
-- Name: mt_insert_blogpost(jsonb, character varying, integer, uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.mt_insert_blogpost(doc jsonb, docdotnettype character varying, docid integer, docversion uuid) RETURNS uuid
    LANGUAGE plpgsql
    AS $$
BEGIN
INSERT INTO public.mt_doc_blogpost ("data", "mt_dotnet_type", "id", "mt_version", mt_last_modified) VALUES (doc, docDotNetType, docId, docVersion, transaction_timestamp());

  RETURN docVersion;
END;
$$;


ALTER FUNCTION public.mt_insert_blogpost(doc jsonb, docdotnettype character varying, docid integer, docversion uuid) OWNER TO postgres;

--
-- Name: mt_update_blogpost(jsonb, character varying, integer, uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.mt_update_blogpost(doc jsonb, docdotnettype character varying, docid integer, docversion uuid) RETURNS uuid
    LANGUAGE plpgsql
    AS $$
DECLARE
  final_version uuid;
BEGIN
  UPDATE public.mt_doc_blogpost SET "data" = doc, "mt_dotnet_type" = docDotNetType, "mt_version" = docVersion, mt_last_modified = transaction_timestamp() where id = docId;

  SELECT mt_version FROM public.mt_doc_blogpost into final_version WHERE id = docId ;
  RETURN final_version;
END;
$$;


ALTER FUNCTION public.mt_update_blogpost(doc jsonb, docdotnettype character varying, docid integer, docversion uuid) OWNER TO postgres;

--
-- Name: mt_upsert_blogpost(jsonb, character varying, integer, uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.mt_upsert_blogpost(doc jsonb, docdotnettype character varying, docid integer, docversion uuid) RETURNS uuid
    LANGUAGE plpgsql
    AS $$
DECLARE
  final_version uuid;
BEGIN
INSERT INTO public.mt_doc_blogpost ("data", "mt_dotnet_type", "id", "mt_version", mt_last_modified) VALUES (doc, docDotNetType, docId, docVersion, transaction_timestamp())
  ON CONFLICT ON CONSTRAINT pk_mt_doc_blogpost
  DO UPDATE SET "data" = doc, "mt_dotnet_type" = docDotNetType, "mt_version" = docVersion, mt_last_modified = transaction_timestamp();

  SELECT mt_version FROM public.mt_doc_blogpost into final_version WHERE id = docId ;
  RETURN final_version;
END;
$$;


ALTER FUNCTION public.mt_upsert_blogpost(doc jsonb, docdotnettype character varying, docid integer, docversion uuid) OWNER TO postgres;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: mt_doc_blogpost; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.mt_doc_blogpost (
    id integer NOT NULL,
    data jsonb NOT NULL,
    mt_last_modified timestamp with time zone DEFAULT transaction_timestamp(),
    mt_version uuid DEFAULT (md5(((random())::text || (clock_timestamp())::text)))::uuid NOT NULL,
    mt_dotnet_type character varying
);


ALTER TABLE public.mt_doc_blogpost OWNER TO postgres;

--
-- Name: TABLE mt_doc_blogpost; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.mt_doc_blogpost IS 'origin:Marten.IDocumentStore, Marten, Version=3.5.0.0, Culture=neutral, PublicKeyToken=null';


--
-- Name: mt_hilo; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.mt_hilo (
    entity_name character varying NOT NULL,
    hi_value bigint DEFAULT 0
);


ALTER TABLE public.mt_hilo OWNER TO postgres;

--
-- Name: TABLE mt_hilo; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.mt_hilo IS 'origin:Marten.IDocumentStore, Marten, Version=3.5.0.0, Culture=neutral, PublicKeyToken=null';


--
-- Name: mt_doc_blogpost pk_mt_doc_blogpost; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.mt_doc_blogpost
    ADD CONSTRAINT pk_mt_doc_blogpost PRIMARY KEY (id);


--
-- Name: mt_hilo pk_mt_hilo; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.mt_hilo
    ADD CONSTRAINT pk_mt_hilo PRIMARY KEY (entity_name);


--
-- PostgreSQL database dump complete
--

